import unittest
import sys
import joshua_console import *
from cStringIO import StringIO

class Test(unittest.TestCase):

	def setUp(self):
        	self.tictactoeGame = TicTacToe()
		self.gameboard = self.tictactoeGame.gameboard
		self.held, sys.stdout = sys.stdout, StringIO()
	
	def test_A_new_tictactoeGame_gameboard_has_nine_cells_filled_with_empty(self):
		self.assertEqual(9,len(self.gameboard))
		for i in range(0,9):
			self.assertEqual("empty",self.gameboard[i])

	def test_addspaces_adds_blanks_to_make_the_cell_length_equal_to_10(self):
		self.assertEqual(10, len(self.tictactoeGame.addspaces("empty")))
		
	def test_addspaces_returns_a_cell_with_length_of_ten_when_given_text_less_then_10(self):
		self.assertEqual(10, len(self.tictactoeGame.addspaces("player_x")))
	
#       My google-fu was weak and I didn't find a simple way to test stdout...
#	there are other things to be done and I'm making the decision to skip this 
#	test as I should be able to easily see any issues. As I proceed, I'm hoping 
#	I stumble across a way to test stdout as well as $1 million and the always elusive
#	unicorn.  
# 	I take the above back...I found a way to capture stdout, but I don't like the test
#	And I still haven't found a unicorn
	def test_print_gameboard_prints_empty_top_row_to_screen(self):
		self.tictactoeGame.printGameboard(self.tictactoeGame.gameboard)
		capture = sys.stdout.getvalue()
		self.assertEqual(True,capture.__contains__("empty     "))

	def test_player_x_is_in_cell_0(self):
		self.gameboard[0] = "player_x"
		self.assertEqual(self.gameboard[0], "player_x")

	def test_player_x_is_in_cell_0__player_o_is_in_cell_1(self):
		self.gameboard[0] = "player_x"
		self.gameboard[1] = "player_o"
		self.assertEqual(self.gameboard[0], "player_x")
		self.assertEqual(self.gameboard[1], "player_o")

	def test_player_x_takes_cell_0(self):
		self.tictactoeGame.takesCell("player_x", 0)	
		self.assertEqual("player_x", self.gameboard[0]) 
	
	def test_player_x_takes_cell_2__player_o_takes_cell_1(self):
		self.tictactoeGame.takesCell("player_x", 0)
		self.tictactoeGame.takesCell("player_o", 1)
		self.assertEqual("player_x", self.gameboard[0])
		self.assertEqual("player_o", self.gameboard[1])
	
			
if __name__ == "__main__":
	unittest.main()
